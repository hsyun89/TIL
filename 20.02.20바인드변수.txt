여러 id를 입력 받을 때
이런 방식의 쿼리는 비효율적

Connection con = null; 
Statement stmt = null; 

String query = "select * from tab where id = " + id; 

stmt = con.createStatement(stmt); 
ResultSet rs = stmt.executeQuery();

왜냐하면 SQL문장이 DBMS에 개별적으로 들어간다.

select * from tab where id = 1; 
select * from tab where id = 2; 
select * from tab where id = 3; 
select * from tab where id = 4; 
select * from tab where id = 5; 

------------->바인드변수를 사용하자

String query = "select * from tab where id = ?" 
PreparedStatement pstmt = con.prepareStatement(query); 
pstmt.setInt(1, id); 

쿼리는 이렇게

select * from tab where id = :id_val; 


-------------
바인드 변수가 중요한 이유
Oracle Database 10g가 SQL 문으로 제시되면 
메모리 영역인 공유 풀을 확인하여 해당 문이 이미 존재하는지, 
그 문이 메모리에 저장되어 있는지를 확인합니다. 
해당 문이 메모리에 이미 존재하고 Oracle Database 10g가 해당 문을 재사용할 수 있으면 
데이터베이스는 이 문의 구문 분석과 최적화 작업을 생략하고 건너뛸 수 있습니다. 
바인드 변수를 사용하는 경우에는 SQL 문이 메모리에 저장될 가능성이 매우 높아지므로 
SQL 문을 필요로 하는 후속 작업에서 이 문을 신속하게 사용할 수 있습니다.
공유 풀에 해당 문이 존재하지 않는 경우, 
데이터베이스는 해당 문에 대한 구문 분석과 최적화 작업을 수행해야 하므로 성능이 저하될 수 있습니다. 
문의 구문 분석과 최적화 작업에는 CPU 주기가 소모되며 소모되는 CPU 주기가 많을수록 작업은 더 느려지게 됩니다.

[출처]
https://blog.sting.pe.kr/112