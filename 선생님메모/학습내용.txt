강사컴퓨터 접근 : 70.12.113.160
               암호 : unico

시작메뉴 - cmd - ipconfig
시작메뉴 - \\70.12.113.160
               student, unico

공유폴더명 : 교육자료

1. chrome 브라우저
2. JDK 1.8(Java Development Kit)
    http://java.sun.com/
    https://www.oracle.com/technetwork/java/index.html
    SE, EE, ME
3. Eclipse(IDE) - Java Developer, Enterprise
    http://www.eclipse.org/

  C:\Program Files\Java\jdk1.8.0_211

   JAVA_HOME 생성
   PATH 수정  -  %JAVA_HOME%\bin;

[ 자바 프로그래밍 ]
- 자바프로그램의 구조
- 데이터 타입, 변수
- 연산자
- 제어문(조건, 반복, 분기) - 
   if, switch, for, while, do while, break, continue
- 배열(1차원, 2차원)
- OOP1 - 클래스 정의와 객체생성
- OOP2 - 상속, 다형성, 추상클래스와 인터페이스
- 예외처리

  C:\여러분의폴더명\eclipse-workspace
  C:\unico\eclipse-workspace

  Project(개발폴더)
  -- Java Project  	- javaexam
  -- Web Project
  -- Spring Project

  맛보기 자바 프로그램 - FirstApp(클래스명)




   compile & interpreter
                     (JVM)
   .java -> .class

   주석(comment) : 3가지
   다중행 : /* .... */
   단일행 : //
   도큐멘테이션 주석 : /**  .....  */





  [public] class 클래스명 {
       public static void main(String args[]) {


       }

  }

  Math, FileReader, FileNotFoundExaception

   

 - 자바의 데이터 타입

    넘버타입 : 정수(byte(1), short(2), int(4), long(8)), 
                  실수(float(4), double(8))
    문자타입 : char(2) - UTF-16
    논리타입 : boolean(?)
    -------------------------------- 기본형
    문자열타입 : String
    -------------------------------- 객체형

    1,   1.0,   '1',   "1"

    1+1     	---> 2
    1.0+1	---> 2.0
    '1'+1  	---> 50
    "1"+1  	---> "11"

    패키지 - day1

   자바 프로그래밍에서 다루게 되는 데이터의 종류

   리터럴 : 프로그램 코드에 사용된 데이터 값
              100, 3.14, true, false, 10L, 'A', '가', ' ', '3', "", "A", "ABC", "111"
   변수    : 데이터 값을 저장하는 메모리상의 방
              사용하기 전에 만들어서 사용해야 한다. - 변수 선언
          		타입명 변수명;
                                     소문자로 시작
   상수    : 변수, 값을 초기화 하면 더 이상 값을 변경할 수 없다.
		final 타입명 변수명;
		                 모두 대문자
			MAX_NUMBER, PI, MIN_PRIORITY			


  [  =  (대입 연산자, 할당 연산자)  ]

  l-value = r-value
  변수        변수, 리터럴, 상수, 연산식, 리턴값이있는메서드의호출식 
              ---------------------------------------------- 식     
  v1 = 100;, v2 = 10+20; v3 = v1; v4 = Math.PI; v5 = Math.random();
  l-value = r-value
  방           값
(1) 큰 = 적
(2) 적 = 큰 (x) --> 강제형변환연산
  
  double > float > long > int > short > byte
  double > float > long > int > char

  boolean : 절대 다른 타입 불가  

  char + int  	-> int + int	-> int
  char + char       	-> int + int	-> int
  int + int	-> int
  long + int 	-> long + long	-> long
  float + double	-> double + double	-> double
  long + float	-> float + float	-> float

  10(10진수), 010(8진수), 0x10(16진수), 0b10(2진수)


  "결과값="+10+20    ---> 결과값=1020
  "결과값="+(10+20)    ---> 결과값=30

  +, -, *, /(몫), %(나머지값)



 A - 0x41
 a - 0x61
 가 - 0xAC00



  [ 자바의 연산자 ]
  - 항(피연산자)의 갯수 : 단항연산자, 이항연산자, 삼항연산자
  - 기능 : 강제형변환, 산술, 비교, 논리, 조건, 대입, 복합대입, 증감

  .
  ++, --, +, -, ~, !, (타입)
  *, /, %
  +, -
  >>, >>>, <<
  >, >=, <, <=, ==, !=, instanceof
  &, |, ^
  &&
  ||
  항1?항2:항3
  =, +=, -=, *=, /=, %=













  - 증감연산자
     증가연산자 : ++ : 단항연산자로서 주어진 항의 값을 1 증가
     감소연산자 : -- : 단항연산자로서 주어진 항의 값을 1 감소

      대부분의 단항연산자들은 연산자가 앞에오고 피연산자가 뒤에 온다.

      !flag
      (int)r_num2
      -num

     ++num;   // 전위형 - 먼저 증가시키고 다른 연산을 수행하라 
     num++;   // 후위형 - 다른 연산을 먼저하고 나중에 증가시켜라  
 
     result = ++num;
     result = num++;

     System.out.println(데이터)
                                 아규먼트

     System.out.println(num)
     System.out.println(++num)
     System.out.println(num++)

     num = num + 1;


  [ 자바의 제어문 ]

  - 조건제어문 : if, switch
  - 반복제어문 : for, while, do while
  - 분기제어문 : break, continue, (goto)


------------------------------------------------------
1일차 - 복습
자바프로그램의 기본 구조 - 클래스, main()
데이터 타입 - byte, short, int, long, float, double, boolean
형변환 -  = 연산 :  r-value(식), l-value(변수), boolean 예외
        산술이항연산(+, -, /, *, %) : int 타입보다 작은 타입은 int로 변환
연산자 - 단항, 이항, 삼항
           (. 가장높다, = 가장낮다)
           + 연산자 : 덧셈, 문자열 결합
if - 조건 제어문(else, else if)
     v1 == 100
     v2 == true
     v3 == 'A'
     v4 == "duke"   -->  v4.equals("duke")




  [ 자바의 반복문 ]

  for 	: 반복할 횟수를 미리 알고 있을 때, 배열의 데이터 값을 다룰 때
  while	: 어떤 조건이 만족되는 동안 반복

  for(;;)  --> 무한루프

   i += 2   --> i = i+2

  


 [ 한글문자의 코드값 ]

 초기 : 정해진 한글 코트가 없었다.
1989년 : KSC5601 --> 완성형한글코드
            EUC-KR
            MS949(CP949)

            가 - 0xB0A1
1990년대 : 유니코드
               UTF-16 ---> 2바이트
            A - \u0041
            가 - \uAC00
               UTF-8 ---> 1~4바이트
               \uEAB080

 [ 자바의 식별자(명칭) 규칙 ] : 클래스명, 메서드명, 변수명, 라벨명
 - 영문대소문자와 숫자, _, $
 - 숫자로시작 불가
 - 길이제한은 없다고 본다.(65535자)
 - 자바의 예약어(키워드)는 사용 불가

   class, extends, implements, import
   public, protected, private
   static, final, abstract
   instanceof
   if, switch, while, for, do, break, continue, default
   byte, short, int, long, float, double, boolean
   



 - System.out.println(), System.out.print()
   - 출력할 데이터를 한 개만 전달 가능(아규먼트를 한 개만)
      System.out.println("결과값="+result);
      System.out.println("결과값=", result);
      전달할 수 있는 데이터의 타입에 제한이 거의 없다.
      System.out.println("결과값="+result);
      System.out.println(100);
      System.out.println('가');
      System.out.println(3.14159786);
      
  ---------------------Java 5(JDK1.5)  System.out.printf();

  System.out.printf(".......")
  System.out.printf(".......", .....)
  System.out.printf("일반문자포맷문자")

  포맷문자 : %정해진문자
             %d, %h, %o
	%s
	%c
	%f  --- %.3f




https://opentutorials.org/course/1223

http://www.jungol.co.kr/

https://olc.kr/course/course_online_list.jsp

 [ 배열 ]
 - 배열을 만드는 방법  - 처리할 데이터의 갯수, 데이터의 타입
        new 타입명[크기]
        new String[24], new int[10], new char[26], new double[5]
 - 배열을 사용하는 방법
        배열을 생성한 다음에는 배열타입의 변수에 담아서 사용한다.

              타입명[] 변수명; // 타입명 변수명[];

              String[] str;  int[] nums; char munja[]; double d[];

              4바이트, 배열의 참조값(주소값)

              int[] nums = new int[10];
 
              nums[0], nums[1], nums[2] ......... nums[9]

              temp = nums[5];
              System.out.println(nums[3])
              nums[3] = ++temp;

              nums.length --> 10
   

  [ 타입별 기본값 ]
  int - 0
  double - 0.0
  boolean - false
  char - \u0000
  long - 0L

  [ traditional for ]

  for(초기식;조거신;증감식) {

  }

  [ enhanced for(for each) ]

  for(변수선언 : 배열/컬렉션객체) {

  }


 [ 지금까지 학습한 구문 복습 ]
 - 데이터 타입 
   기본형 - byte, short, int, long, float, double, char, boolean
   참조형(객체형) 
 - 데이터의 종류
   리터럴, 변수, 상수
   100, 100L, 3.14, 3.14f, 'a', '가', '1', ' ', " ", "", "A", "ABC", 
   true, false
   number, "number", number(), number[0]
   - 변수 : 사용하기 전에 선언해서 사용한다.
              타입명 변수명;
	 타입명 변수명=초기값;
              값(r-value), 방(l-value)
              자바의 식별자, 관례적으로 소문자, 명사
   - 상수 : 초기화된 상태에서 더 이상 값을 변경할 수 없는 변수
              final 타입명 변수명;
	 final 타입명 변수명=초기값;
              모두 대문자, _ 를 자주 사용한다.
 - 연산자
    .
    ++, --, !, +, -, (타입)
    *, /, %
    +, -
    >, <, >=, <=
    ==, != 
    &&
    ||
    항1 ? 항2 : 항3
    =, +=, *=, /=, %=, -=
 
 - if, if ~ else, if ~ else if ~ else if ~.... else
   switch, break, default, case
   for(초기식;조건식;증감식), for(;;), for(변수선언식 : 배열)
   while(조건식), while(true)
   ---> break

- 1차원 배열
  동일한 타입의 데이터들을 집합으로 다룰 수 있게 지원하는 
  데이터 구조, 다량의 데이터를 다루는데 있어서 효율적
	new 타입[크기]
             타입[] 변수명; 타입 변수명[];  // 참조형
             int[] nums = new int[10];
             nums[0]~nums[9], nums[-1](x), nums[10](x)
             nums.length  --> 배열의 크기값

  최근 5년간의 각 월별 강수량 데이터
  60 개의 원소를 갖는 배열
  [ 자바의 2차원 배열 ]
  테이블 구조로 데이터들을 다룰 수 있게 지원하는 데이터 구조
  동일 크기를 갖는 1차원 배열이 여러 개 있는 구조

  생성 방법 : new 타입[행의크기][열의크기] 
                { {1,2,3,4}, {11,22,33,44}}
  사용 방법 : 2차원 배열 변수에 담아서 사용한다.
                 타입 변수명[][];
	    타입[] 변수명[];
	    타입[][] 변수명;
	int nums[][] = new int[5][10];
             nums[0][0], nums[0][1], ...                

	{ 
	  {1,2,3,4}, 
               {11,22,33,44}
             }

 	{ 
	  {1,2,3,4} 
               , {11,22,33,44}
             }





  


  Java 5(JDK 1.5)
    enhanced for
    System.out.printf()
    Scanner : 입력받는 역할의 API
          Scanner scan = new Scanner(파일);
          Scanner scan = new Scanner(System.in);
          scan.next()  - 단어(워드), String
          scan.readLine() - 한 행
          scan.nextInt() - int
          scan.nextDouble() - double
                  :


  aaa\nbbb\nccc\n










 비교식1 || 비교식2 || 비교식3  
 비교식1 && 비교식2 && 비교식3

[ 메서드 ]
- 수행코드는 반드시 메서드 안에 작성해야 한다.
- main()도 메서드로서 JVM에 의해 자바프로그램이 수행을 시작할 때
  최초로 호출된다.(자바프로그램 수행의 시작점)
- 자주 필요로 하는 기능을 추가 메서드로 생성하여 활용하는 것이 
  일반적이다.
- 메서드 생성 방법
- 메서드 사용 방법 : 호출

[ 메서드 생성 방법 ]
- 메서드명 : 관례적으로 동사로시작, 소문자로 시작
- 매개변수 선언 : 선택적이다. 갯수 제한 없다.
               호출시 전달받을 데이터의 유무에 따라
- 리턴값의 타입 : 호출한 곳으로 결과값을 반환할지의 여부에 따라(필수)
               리턴값이 없는 경우에는 void 라는 리턴타입 지정                              
               하나의 값만 리턴 가능
               여러 값을 리턴하려는 경우에는 배열 또는 객체를 활용

   리턴타입 메서드명([매개변수 선언...]) {
	....
 	....
	[ return 리턴값; ]
   }

   변수명 = 메서드명();
   메서드명();
   변수명 = 메서드명(아규먼트...);
   메서드명(아규먼트...);




 System.out.println();	// 개행처리만
 System.out.println(100);
 System.out.println(true);
 System.out.println("duke");
 -----------------------------> 10개로 오버로딩

  [ 가변인자 타입 ]
  매개변수의 타입에 ... 을 붙이면 가변인자 타입이 되며
  가변인자 타입의 매개변수는 내부적으로 배열이 된다.
  호출할 땐 해당 타입의 아규먼트를 0개이상 전달 가능하다.
  제한사항 : 반드시 마지막 매개변수에만 가변인자 타입이 가능하다.

     void m1(int... nums)
     void m1(char ch, int... nums)
     void m1(int... nums, char ch) (x)
   new int[0], new String[0]


   aaa bbb ccc ddd 1234 가나다

   java day5.MethodTest7
   java day5.MethodTest7 abc 가나 100
 [ 클래스 정의와 객체 생성 ]

  클래스 - 멤버변수, 생성자메서드, 일반메서드

  클래스의 사용 방법 
  (1) 클래스명.멤버  --> 사용하려는 멤버가 static 인 경우
  (2) 객체생성.멤버
  
 [ 생성자 메서드 ]
 - 클래스를 객체 생성할 때 호출되는 메서드
        new 생성자메서드호출식
        	new Student()
	new Member()
 - 특징
   1. 메서드명이 클래스명과 동일해야 한다.
   2. 매개변수는 자유롭게, 오버로딩 가능
   3. 리턴값의 타입은 반드시 생략한다.(void(x))
   4. 생략 가능하다. 생성자 메서드가 존재하지 않는 클래스의
      경우엔 컴파일러가 자동으로 한 개 생성해 준다.
       --> 디폴트 생성자라 한다.( 매개변수 없다)

      javap  day6.Student

new Member3("피카츄", "001", "1111", 2000)

타입별 기본 초기화 
int : 0, double : 0.0, boolean : false
참조형 : null(참조하는 대상이 존재하지 않음)

https://kea.nu/files/textbooks/new/Effective%20Java%20%282017%2C%20Addison-Wesley%29.pdf



[ 클래스 정의와 객체 생성 정리 ]
- 클래스 : 객체를 생성하기 위한 프로그램 구조
             (자바는 클래스 단위의 프로그래밍)
- 객체 : 클래스를 메모리에 할당하여 사용 가능한 상태로 만든 것
- 객체변수(참조형 변수)에 저장하여 . 연산자로 객체의 멤버들을 사용한다.
  (private 형 멤버는 제외)
- 클래스 객체 생성시에는 어떤 생성자를 호출할 것인가?
- 생성자 메서드 정의 방법 :
   클래스명과 이름이 같아야 한다.
   리턴 타입을 생략한다.
   필요에 따라서 this()메서드를 사용할 수 있다.
   여러 개로 오버로딩할 수 있다.
- this, this() 


 [ API : Application Programming Interface ]
 자주 사용되는 프로그램을 미리 만들어서 제공하는 거
 클래스로 제공된다.

     File : 주어진 파일명의 파일이 존재하는지 채크하는 메서드
         
     c:\Temp    
     c:\Temp\imsi.txt
     c:\Temp\not.txt

     c:/Temp    
     c:/Temp/imsi.txt
     c:/emp/not.txt

     Card.java
     src\day7\Card.java

     -verbose:class

     접근제어자 : public, protected, (default), private



 




  day1~day8

  package day8;
  package day8.am;
  package day8.pm;

  import day8.클래스명;
  import day8.*;
  import day8.am.*;

  import day8.*;
[ 상속 구문 ]
- 모든 자바클래스는 하나의 부모 클래스를 가진다.
- 동일 클래스에 존재하는 멤버 대신 부모 클래스의 멤버를 사용하려면
  super 변수를 사용한다.
- 클래스의 객체 생성시에는 해당 클래스의 조상 클래스도 객체 생성된다.
   조상의 객체들도 초기화가 되도록 모든 클래스의 생성자안에서는 
   조상의 생성자를 호출하는 기능이 있어야 한다. super()
   (this()를 호출하는 생성자는 제외)
- 조상 클래스 지정시 extends 절을 사용한다.
- 상속을 통해서 조상이 가지고 있는 대부분의 멤버들을 내려받게 된다.
  (생성자, private 형 멤버는 제외)
  조상으로 부터 물려받은 메서드들 중에서 선택적으로 오버라이딩 할 수
  있다. (헤더가 동일, 접근제어자가 동일하거나 넓게 지정하는건 가능)

   final 메서드 : 오버라이딩 불가
   abstract 메서드 : 강제로 오버라이딩 요구

   
   Object o = "둘리";
   String s = "또치";

 [ 다형성 : polymophism ]
 조상유형의 변수로 조상의 객체뿐만 아니라 자손의 객체도 참조할 수 있다.
 (자손에서 추가된 멤버는 접근 불가하므로 자손유형으로 강제형변환하여
  접근해야 한다.)

 참조형 변수는 어떤 클래스 유형의 참조형 변수냐에 따라 접근할 수 있는 
 멤버의 사양이 정해진다. 

 참조하게된 객체가 어떤 클래스의 객체인지 채크하고자 할 때 사용되는 
 연산자는 instanceof 이다.

 제어자 - 접근제어자 : public, protected, (default), private
             활용제어자 : static, final, abstract

      [제어자들] 리턴값의타입 메서드명([매개변수 선언...]) {
	................
      } 

  [ abstract 메서드 ]
  추상메서드(미완성메서드)

      abstract 리턴값의타입 메서드명([매개변수 선언...]);
 
      --> abstract 메서드를 1개 이상 선언하고 있는 클래스는 
            활용제어자로 abstract 를 설정해야 한다.

            abstract class 클래스명 [extends 부모클래스명 {


            }
            --> 추상 클래스(미완성 클래스)
                  객체 생성 불가, 참조형 변수 선언은 가능, 상속은 가능

                 (1) 기능적으로 상속으로만 사용되는 클래스를 정의할 때
                 (2) 몇 개의 클래스들을 하나의 타입으로 묶고 싶을 때






   클래스 앞 : public, (default)
                  abstract, final
   생성자 메서드 : public, protected, (default), private
   멤버변수 : public, protected, (default), private
                 static, final
   메서드 : public, protected, (default), private
              abstract, static, final
   지역변수 : final     

   미션 : (1) RuntimeTest 클래스를 생성한다.
           (2) Runtime 클래스의 객체를 생성하여 r 이라는 Runtime 타입
                변수에 저장한다.

   Runtime 클래스는 singleton 패턴을 적용하여 만들어진 클래스이다.
   singleton 패턴 : 클래스의 객체를 여러번 생성해도 내부적으로
                         하나의 객체를 공유하게 하는것

   객체 생성을 대신 해주는 일반 메서드를 팩토리 메서드라고 한다.




 [ 인터페이스 ]
 - 단일 상속만 지원하는 자바의 구문을 보완하기 위해
    인터페이스라는 특별한 용도의 클래스 구문을 지원
 - abstract 클래스와 유사하며 단일 상속의 제한이 없다.
 - 상속으로만 활용가능, 객체 생성 불가
 - 일반 메서드는 존재할 수 없다. 
    abstract 메서드로만 구성 가능한 클래스이다.

    interface 인터페이스이름 [ extends 부모인터페이스, ... ] {
          상수선언
          abstract 메서드
          default 메서드
    }

    class 클래스명 extends 부모클래스명 
                           implements 부모인터페이스, .... {
        .....
    }
    
    class Child extends Parent implements I1, I2, I3 {


    }

    I1 obj = new Child();

[ 자바의 예외 처리 ]
 컴파일 오류 : 컴파일할 때 발생하는 오류
                  구문 오류
 실행 오류 : 자바 프로그램(실행파일)이 실행하는 동안 발생하는 오류
                에러 - JVM영역에서 발생하는 오류로 심각한 오류
                         프로그램 실행을 JVM이 강제로 중단시킨다.
                예외 - 프로그램 영역에서 발생하는 오류로 다소 가벼운 오류
                         기본은 프로그램 실행을 JVM이 강제로 중단시킨다.
                         예외처리라는 구문을 이용하여 중단하지 않고
                         계속해서 프로그램 실행을 진행하게 하거나 중단
                         하더라도 적당한 오류메시지를 출력하게 할 수 있다.
                         런타임예외 : 예외처리 구현이 선택
                         일반예외 : 예외처리 구현이 필수

                Object - Throwable - Exception - ......
                                                             - RuntimeException - ....

  try, catch, finally, throws - 처리 
  throw - 발생



  .... 메서드명([매개변수 선언...]) throws AException, BException {



  }

   void setAge(int age) {
      if (age < 0)
	//throw 적당한명칭의예외클래스객체; 
             throw new IllegalArgumentException("음수 나이는 불가함!!");
      this.age = age;
   }

   setAge(-10)

   class IllegalAgeException extends Exception {
       IllegalAgeException() {}
       IllegalAgeException(String m) {
 	super(m);
       }
   }

   void setAge(int age) throws IllegalAgeException {
      if (age < 0)
	//throw 적당한명칭의예외클래스객체; 
             throw new IllegalAgeException("음수 나이는 불가함!!");
      this.age = age;
   }
  [ Java의 API ]
   java.lang : 프로그래밍 하면서 기본적으로 사용되는 클래스와 인터페이스
   java.util : 다양하고 유용한 기능을 제공하는 클래스와 인터페이스
   java.net : 통신 프로그램을 개발할 때 필요로 하는 기능을 제공하는
                 클래스와 인터페이스
         :

   v1 == v2    ----> false
   1234  2345

   String - 읽는 용도, immutable
   StringBuffer(StringBuilder) - 편집 용도

     String s = new String("abc");

     s.toUpperCase()


     dan + "X" + num + "=" + dan*num
  [ Collection API : 자료구조 API ]
  데이터들의 집합을 좀더 편하고 효과적으로 다룰 수 있게 지원
  리스트 : 데이터의 저장 순서를 유지한다. 데이터의 중복을 채크하지 않음
  맵 : 이름과 값을 저장한다. 이름은 중복 불가.
  셋 : 데이터의 저장 순서를 유지하지 않음. 데이터의 중복을 채크

  리스트 : ArrayList, LinkedList, (Vector)
  맵 : HashMap, (Hashtable)
  셋 : HashSet, TreeSet, LinkedHashSet



Value3<Date> o = new Value3<Date>()

Value3<String> o = new Value3<String>()

		java.lang
  byte		Byte
  short		Short
  int		Integer
  long		Long
  float		Float
  double		Double
  char		Character
  boolean		Boolean




 Collections 클래스 
 --> Collection 객체들을 사용하는데 있어서 여러가지 유용한 메서드를
       제공해주는 도우미 클래스이다.



  java.lang.System : 모든 멤버(속성(멤버변수),메서드) static
         	System.in    - 표준입력장치(키보트)
     	System.out  - 표준출력장치(화면,스크린,모니터)
	System.getMilliSeconds()
	System.gc()
	System.exit() - main : return
                   :

 [ Java의 IO 프로그래밍 ]
 - 입력과 출력 프로그래밍
 - 프로그램 실행에 필요한 데이터를 읽는다.(입력)
 - 프로그램 실행의 결과를 내보낸다. (출력)
 - 입력 : 표준, 파일, 네트워크
 - 출력 : 표준, 파일, 네트워크
 - 입출력 대상에 관계없이 스트림이라는 논리적인 구조를 사용한다.
    즉, 스트림 객체를 사용한다.
        ----------
        (1) 입력용과 출력용 나눠져 있다.
        (2) 바이트 스트림과 문자 스트림으로 나눠져 있다.
 - 주요 API(java.io)
    File : 파일점검, 파일 생성, 파일 삭제, 파일 이름변경...
    FileReader, FileWriter
    BufferedReader, BufferedWriter
    PrintWriter
    FileInputStream, FileOutputStream
    DataInputStream, DataOutputStream
    InputStreamRader, OuputStreamWriter --> 
         바이트스트림객체를 문자스트림 객체로 변환하는 브릿지객체
   
  

[ try-catch-with-resource : Java 6? ]

  try {

  } catch (....) {

  } finally {
       close 기능
  }

  try (변수선언과객체생성) {

  } catch (....) {

  }


  UTF-16 --- 자바가 지원 코드셋 - 한글영문모두 2바이트
  MS949(EUC-KR, KSC5601, CP949) --- Windows 7
            한글 2바이트, 영문 1바이트
                                                  UTF-16(2)	UTF-8(1~4)
            A - 0x41 --------------> \u0041        \u41
            가 - 0xB0A1 -----------> \u00B0
                  0xB0A1 -----------> \uAC00        \uEAB080
                               

  UTF-8 ?

  [ URL 프로그래밍 ] - IO 프로그래밍 응용
   - URL 문자열(웹 사이트의 주소 문자열)
      http://서버의도메인명[:포트번호]/패스/파일 
   - URL이라는 클래스가 제공되어(java.net) 객체 생성시 지정된 URL
     문자열에 해당되는 사이트의 소스를 받아올 수 있다. - 웹 크롤링

     http://www.naver.com/

     www.naver.com

     http://www.kma.go.kr/wid/queryDFSRSS.jsp?zone=1168064000



 ObjectOputStream - writeObject()
 ObjectInputStream - readObject()



[ DataBase & SQL & JDBC(java.sql) 학습 ]

SQL : DataBase에 보관된 데이터를 처리하는 언어
CRUD
INSERT
SELECT
UPDATE
DELETE

[ 오라클 설치시 ] 

관리자(system) 계정의 패스워드 : manager

system : 관리자계정 
scott : 사용자계정
hr : 사용자계정

서버 & 클라이언트

[ 오라클 서버 접근하는 클라이언트 프로그램 ]
(1) sqlplus 라는 명령
(2) sqldeveloper 프로그램

(1) sqlplus 라는 명령

cmd 창을 기동시킨다.
sqlplus 

[ scott 계정 생성 ]

C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin
@C:\oraclexe\app\oracle\product\11.2.0\server\rdbms\admin\scott.sql
SQL> alter user scott identified by tiger;
SQL> connect system/manager

[ hr 계정 락(lock) 풀기 ]
alter user hr account unlock;
alter user hr identified by hr;

[ work 계정 만들기 : SQL 실습시간에 사용 ]
create user work identified by work;
grant connect, resource to work;

[ jdbctest 계정 만들기 : JDBC 수업시간에 사용 ]
create user jdbctest identified by jdbctest;
grant connect, resource to jdbctest;


SELECT 추출하려는 컬럼명리스트
FROM 테이블이름   ----> 프로젝션


SELECT *
FROM 테이블이름
WHERE 추출하려는행들을결정하는비교식  ----> 셀렉션


SELECT 추출하려는 컬럼명리스트
FROM 테이블이름
WHERE 추출하려는행들을결정하는비교식  ----> 셀렉션+프로젝션

select ename, sal, sal*12+nvl(comm,0), comm from emp;

select ename, sal, comm from emp where comm is null;



















    varchar2(18)
    char(18)


   어제 실습하던거 9시 35분까지 시간 드립니다.

   sysdate -> 현재 날짜와 시간을 리턴해주는 오라클 함수
   now() -> 현재 날짜와 시간을 리턴해주는 xxx 함수

   [ SQL 함수 ]
   ANSI 표준 함수, DBMS 고유의 함수
   - 문자열 함수
   - 숫자 함수
   - 날짜 함수
   - 변환함수
          문자열-날짜
          문자열-숫자



SELECT to_char(SYSDATE, 'yyyy/mm/dd hh:mi') AS TODAY,
       to_char(ROUND(SYSDATE, 'CC'), 'yyyy/mm/dd hh:mi') AS FORMAT_CC,
       to_char(ROUND(SYSDATE, 'YYYY'), 'yyyy/mm/dd hh:mi') AS FORMAT_YYYY,
       to_char(ROUND(SYSDATE, 'Q'), 'yyyy/mm/dd hh:mi') AS FORMAT_Q,
       to_char(ROUND(SYSDATE, 'DDD'), 'yyyy/mm/dd hh:mi') AS FORMAT_DDD,
       to_char(ROUND(SYSDATE, 'HH'), 'yyyy/mm/dd hh:mi') AS FORMAT_HH,
       to_char(ROUND(SYSDATE, 'DAY'), 'yyyy/mm/dd hh:mi') AS FORMAT_DAY
FROM DUAL;


SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 현재날짜시간
  FROM DUAL;

SELECT TO_CHAR(SYSDATE, 'YYYY"년" MM"월" DD"일" HH24:MI:SS') AS 현재날짜시간
  FROM DUAL;


               5,000
     999,999,999.00
     000,999,999.00
     000,005,000
     099,999,999

     '19/05/03'
     '19@05@03'
     '2019년03월20일'  -> to_date()  'yyyy"년"mm"월"dd"일"'
     '20/05/2019'  -> to_date()   'dd/mm/yyyy'

 create table imsi(
      name varchar2(30),
      birthday date
 );
 insert into imsi values('고길동', sysdate);
 insert into imsi values('둘리1', to_date('88-03-10', 'yy-mm-dd'));
 insert into imsi values('둘리2', to_date('88-03-10', 'rr-mm-dd'));
 insert into imsi values('또치1', to_date('33-03-10', 'yy-mm-dd'));
 insert into imsi values('또치2', to_date('33-03-10', 'rr-mm-dd'));  

 select name, to_char(birthday, 'yyyy-mm-dd') from  imsi;
    1995
    2011


  select ename, comm from emp;

  select ename, comm from emp;   // "미정"

  select ename, nvl(comm, '미정') from emp; 
                      100
                      '미정'


  휴지통에 들은 테이블을 조회.
SQL> show recyclebin;

휴지통의 모든 내용이 비워집니다.
SQL> purge recyclebin;

삭제된 테이블을 되살리고 싶다면
SQL> flashback table 테이블명 to before drop;

만약, 특정 테이블을 휴지통에 남기지 않고 모두 삭제하려면..
SQL> drop table 테이블명 purge;

purge문 없이 그냥 drop 한 후에는
SQL> purge table 테이블명;


   실습 문제에서 2,3,8,9,11 번만 풀어보세요.
   다른건 조인 구문을 공부해야 풀 수 있어요ㅜㅜ
   조인 공부하고 다시 드릴께요.










INSERT INTO EMP VALUES
           (7940,'MARRY','CLERK',7782,'1999-05-13',1000,null,null);

COMMIT;

   20일(월) SQL
   21일(화) SQL, JDBC
   22일(수) JDBC
   23일(목) 특강
   24일(금) SQL&JDBC 평가시험, Web Client(HTML)


  이민우-최영선|김유정-박건호|이경준-윤현수|
  고경준-이정규|박찬우-설동재|고예성-채민현학|
  홍성재-이영걸|호유송-정승명|김소미-강다영|
  오현경-전지나|강보성-경  현|한수용-null






     < ANY (3, 7, 9, 10, 5)
  N  < ALL (3, 7, 9, 10, 5)

     IN(NOT IN), >ANY, <ANY, >ALL, <ALL, =ANY
     

    WITH ALIAS명 AS ( SUB쿼리 )
    SELECT 컬럼명 FROM ALIAS명;


   DQL : SELECT
   DML : INSERT, DELETE, UPDATE, MERGE
   DDL : CREATE TABLE, DROP TABLE, ALTER TABLE
   TCL : ROLLBACK, COMMIT



   ""
   ''
   ' '
    1 != 1   / - $ @

    to_date('2019년06월20일', 'yyyy"년"mm"월"dd"일')

  java  :  기본(core) API
  javax : 확장 API
 ------------------ 자바만의 API
  org : 어떤 표준 단체에서 제안한 기능을 지원하는 API


  [ JDBC (Java DataBase Connectibity) ]

  java.sql, javax.sql
  --------

  (1) 자바프로그램으로 오라클 서버를 접속하는 기능 구현 - ConnectDB
  (2) visitor 테이블의 데이터들을 읽어오는 기능 구현 - VisitorList
  
  javaexam 이라는 프로젝트에 jdbcexam 팩키지를 생성한다.   

   ojdbc6.jar - 오라클 전용 드라이버, thin driver

  URL : Uniform Resource Locator
          어떤 자원의 위치 알리는 단일화된 형식의 문자열
          HTTP URL : 웹 사이트의 주소 문자열
          JDBC URL : 접속할 DB서버의 정보와 사용할 드라이버 정보를
                          ':' 기호로 구분하여 작성한 문자열



1. 기본키
2. 한글 몇글자가 들어가는 무슨 타입을 만들고 싶다.
3. 셀렉트문 행에대한 조건 그룹에대한 조건의 위치
4. 컬럼값이 널이면 어떤값으로 쓰시오 함수
5. 연산자 and or ||를 사용하면 결합
6. 등가 연산자, 비등가 연산자 between a and b
7. 그룹함수 다중행 데이터 뭐가있는지~로 시작하는, ~로 비교하는 패턴비교
8. 다중행 연산자 in, all
9. 날짜 데이터 to_char 원하는 방식으로 변환하기
10. dml의 종류
11. execute update
12. statement, prepare statement
13. 라운드 함수

실습
1. dbms 10개/ 5개쉽개 5개 어렵게
2. jdbc 1문제 셀렉트 실습한거 한개중 두개






























