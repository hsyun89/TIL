강사컴퓨터 접근 : 70.12.113.160
               암호 : unico

시작메뉴 - cmd - ipconfig
시작메뉴 - \\70.12.113.160
               student, unico

공유폴더명 : 교육자료

1. chrome 브라우저
2. JDK 1.8(Java Development Kit)
    http://java.sun.com/
    https://www.oracle.com/technetwork/java/index.html
    SE, EE, ME
3. Eclipse(IDE) - Java Developer, Enterprise
    http://www.eclipse.org/

  C:\Program Files\Java\jdk1.8.0_211

   JAVA_HOME 생성
   PATH 수정  -  %JAVA_HOME%\bin;

[ 자바 프로그래밍 ]
- 자바프로그램의 구조
- 데이터 타입, 변수
- 연산자
- 제어문(조건, 반복, 분기) - 
   if, switch, for, while, do while, break, continue
- 배열(1차원, 2차원)
- OOP1 - 클래스 정의와 객체생성
- OOP2 - 상속, 다형성, 추상클래스와 인터페이스
- 예외처리

  C:\여러분의폴더명\eclipse-workspace
  C:\unico\eclipse-workspace

  Project(개발폴더)
  -- Java Project  	- javaexam
  -- Web Project
  -- Spring Project

  맛보기 자바 프로그램 - FirstApp(클래스명)




   compile & interpreter
                     (JVM)
   .java -> .class

   주석(comment) : 3가지
   다중행 : /* .... */
   단일행 : //
   도큐멘테이션 주석 : /**  .....  */





  [public] class 클래스명 {
       public static void main(String args[]) {


       }

  }

  Math, FileReader, FileNotFoundExaception

   

 - 자바의 데이터 타입

    넘버타입 : 정수(byte(1), short(2), int(4), long(8)), 
                  실수(float(4), double(8))
    문자타입 : char(2) - UTF-16
    논리타입 : boolean(?)
    -------------------------------- 기본형
    문자열타입 : String
    -------------------------------- 객체형

    1,   1.0,   '1',   "1"

    1+1     	---> 2
    1.0+1	---> 2.0
    '1'+1  	---> 50
    "1"+1  	---> "11"

    패키지 - day1

   자바 프로그래밍에서 다루게 되는 데이터의 종류

   리터럴 : 프로그램 코드에 사용된 데이터 값
              100, 3.14, true, false, 10L, 'A', '가', ' ', '3', "", "A", "ABC", "111"
   변수    : 데이터 값을 저장하는 메모리상의 방
              사용하기 전에 만들어서 사용해야 한다. - 변수 선언
          		타입명 변수명;
                                     소문자로 시작
   상수    : 변수, 값을 초기화 하면 더 이상 값을 변경할 수 없다.
		final 타입명 변수명;
		                 모두 대문자
			MAX_NUMBER, PI, MIN_PRIORITY			


  [  =  (대입 연산자, 할당 연산자)  ]

  l-value = r-value
  변수        변수, 리터럴, 상수, 연산식, 리턴값이있는메서드의호출식 
              ---------------------------------------------- 식     
  v1 = 100;, v2 = 10+20; v3 = v1; v4 = Math.PI; v5 = Math.random();
  l-value = r-value
  방           값
(1) 큰 = 적
(2) 적 = 큰 (x) --> 강제형변환연산
  
  double > float > long > int > short > byte
  double > float > long > int > char

  boolean : 절대 다른 타입 불가  

  char + int  	-> int + int	-> int
  char + char       	-> int + int	-> int
  int + int	-> int
  long + int 	-> long + long	-> long
  float + double	-> double + double	-> double
  long + float	-> float + float	-> float

  10(10진수), 010(8진수), 0x10(16진수), 0b10(2진수)


  "결과값="+10+20    ---> 결과값=1020
  "결과값="+(10+20)    ---> 결과값=30

  +, -, *, /(몫), %(나머지값)



 A - 0x41
 a - 0x61
 가 - 0xAC00



  [ 자바의 연산자 ]
  - 항(피연산자)의 갯수 : 단항연산자, 이항연산자, 삼항연산자
  - 기능 : 강제형변환, 산술, 비교, 논리, 조건, 대입, 복합대입, 증감

  .
  ++, --, +, -, ~, !, (타입)
  *, /, %
  +, -
  >>, >>>, <<
  >, >=, <, <=, ==, !=, instanceof
  &, |, ^
  &&
  ||
  항1?항2:항3
  =, +=, -=, *=, /=, %=













  - 증감연산자
     증가연산자 : ++ : 단항연산자로서 주어진 항의 값을 1 증가
     감소연산자 : -- : 단항연산자로서 주어진 항의 값을 1 감소

      대부분의 단항연산자들은 연산자가 앞에오고 피연산자가 뒤에 온다.

      !flag
      (int)r_num2
      -num

     ++num;   // 전위형 - 먼저 증가시키고 다른 연산을 수행하라 
     num++;   // 후위형 - 다른 연산을 먼저하고 나중에 증가시켜라  
 
     result = ++num;
     result = num++;

     System.out.println(데이터)
                                 아규먼트

     System.out.println(num)
     System.out.println(++num)
     System.out.println(num++)

     num = num + 1;


  [ 자바의 제어문 ]

  - 조건제어문 : if, switch
  - 반복제어문 : for, while, do while
  - 분기제어문 : break, continue, (goto)


------------------------------------------------------
1일차 - 복습
자바프로그램의 기본 구조 - 클래스, main()
데이터 타입 - byte, short, int, long, float, double, boolean
형변환 -  = 연산 :  r-value(식), l-value(변수), boolean 예외
        산술이항연산(+, -, /, *, %) : int 타입보다 작은 타입은 int로 변환
연산자 - 단항, 이항, 삼항
           (. 가장높다, = 가장낮다)
           + 연산자 : 덧셈, 문자열 결합
if - 조건 제어문(else, else if)
     v1 == 100
     v2 == true
     v3 == 'A'
     v4 == "duke"   -->  v4.equals("duke")




  [ 자바의 반복문 ]

  for 	: 반복할 횟수를 미리 알고 있을 때, 배열의 데이터 값을 다룰 때
  while	: 어떤 조건이 만족되는 동안 반복

  for(;;)  --> 무한루프

   i += 2   --> i = i+2

  


 [ 한글문자의 코드값 ]

 초기 : 정해진 한글 코트가 없었다.
1989년 : KSC5601 --> 완성형한글코드
            EUC-KR
            MS949(CP949)

            가 - 0xB0A1
1990년대 : 유니코드
               UTF-16 ---> 2바이트
            A - \u0041
            가 - \uAC00
               UTF-8 ---> 1~4바이트
               \uEAB080

 [ 자바의 식별자(명칭) 규칙 ] : 클래스명, 메서드명, 변수명, 라벨명
 - 영문대소문자와 숫자, _, $
 - 숫자로시작 불가
 - 길이제한은 없다고 본다.(65535자)
 - 자바의 예약어(키워드)는 사용 불가

   class, extends, implements, import
   public, protected, private
   static, final, abstract
   instanceof
   if, switch, while, for, do, break, continue, default
   byte, short, int, long, float, double, boolean
   



 - System.out.println(), System.out.print()
   - 출력할 데이터를 한 개만 전달 가능(아규먼트를 한 개만)
      System.out.println("결과값="+result);
      System.out.println("결과값=", result);
      전달할 수 있는 데이터의 타입에 제한이 거의 없다.
      System.out.println("결과값="+result);
      System.out.println(100);
      System.out.println('가');
      System.out.println(3.14159786);
      
  ---------------------Java 5(JDK1.5)  System.out.printf();

  System.out.printf(".......")
  System.out.printf(".......", .....)
  System.out.printf("일반문자포맷문자")

  포맷문자 : %정해진문자
             %d, %h, %o
	%s
	%c
	%f  --- %.3f




https://opentutorials.org/course/1223

http://www.jungol.co.kr/

https://olc.kr/course/course_online_list.jsp

 [ 배열 ]
 - 배열을 만드는 방법  - 처리할 데이터의 갯수, 데이터의 타입
        new 타입명[크기]
        new String[24], new int[10], new char[26], new double[5]
 - 배열을 사용하는 방법
        배열을 생성한 다음에는 배열타입의 변수에 담아서 사용한다.

              타입명[] 변수명; // 타입명 변수명[];

              String[] str;  int[] nums; char munja[]; double d[];

              4바이트, 배열의 참조값(주소값)

              int[] nums = new int[10];
 
              nums[0], nums[1], nums[2] ......... nums[9]

              temp = nums[5];
              System.out.println(nums[3])
              nums[3] = ++temp;

              nums.length --> 10
   

  [ 타입별 기본값 ]
  int - 0
  double - 0.0
  boolean - false
  char - \u0000
  long - 0L

  [ traditional for ]

  for(초기식;조거신;증감식) {

  }

  [ enhanced for(for each) ]

  for(변수선언 : 배열) {

  }


 [ 지금까지 학습한 구문 복습 ]
 - 데이터 타입 
   기본형 - byte, short, int, long, float, double, char, boolean
   참조형(객체형) 
 - 데이터의 종류
   리터럴, 변수, 상수
   100, 100L, 3.14, 3.14f, 'a', '가', '1', ' ', " ", "", "A", "ABC", 
   true, false
   number, "number", number(), number[0]
   - 변수 : 사용하기 전에 선언해서 사용한다.
              타입명 변수명;
	 타입명 변수명=초기값;
              값(r-value), 방(l-value)
              자바의 식별자, 관례적으로 소문자, 명사
   - 상수 : 초기화된 상태에서 더 이상 값을 변경할 수 없는 변수
              final 타입명 변수명;
	 final 타입명 변수명=초기값;
              모두 대문자, _ 를 자주 사용한다.
 - 연산자
    .
    ++, --, !, +, -, (타입)
    *, /, %
    +, -
    >, <, >=, <=
    ==, != 
    &&
    ||
    항1 ? 항2 : 항3
    =, +=, *=, /=, %=, -=
 
 - if, if ~ else, if ~ else if ~ else if ~.... else
   switch, break, default, case
   for(초기식;조건식;증감식), for(;;), for(변수선언식 : 배열)
   while(조건식), while(true)
   ---> break

- 1차원 배열
  동일한 타입의 데이터들을 집합으로 다룰 수 있게 지원하는 
  데이터 구조, 다량의 데이터를 다루는데 있어서 효율적
	new 타입[크기]
             타입[] 변수명; 타입 변수명[];  // 참조형
             int[] nums = new int[10];
             nums[0]~nums[9], nums[-1](x), nums[10](x)
             nums.length  --> 배열의 크기값

  최근 5년간의 각 월별 강수량 데이터
  60 개의 원소를 갖는 배열
  [ 자바의 2차원 배열 ]
  테이블 구조로 데이터들을 다룰 수 있게 지원하는 데이터 구조
  동일 크기를 갖는 1차원 배열이 여러 개 있는 구조

  생성 방법 : new 타입[행의크기][열의크기] 
                { {1,2,3,4}, {11,22,33,44}}
  사용 방법 : 2차원 배열 변수에 담아서 사용한다.
                 타입 변수명[][];
	    타입[] 변수명[];
	    타입[][] 변수명;
	int nums[][] = new int[5][10];
             nums[0][0], nums[0][1], ...                

	{ 
	  {1,2,3,4}, 
               {11,22,33,44}
             }

 	{ 
	  {1,2,3,4} 
               , {11,22,33,44}
             }





  


  Java 5(JDK 1.5)
    enhanced for
    System.out.printf()
    Scanner : 입력받는 역할의 API
          Scanner scan = new Scanner(파일);
          Scanner scan = new Scanner(System.in);
          scan.next()  - 단어(워드), String
          scan.readLine() - 한 행
          scan.nextInt() - int
          scan.nextDouble() - double
                  :


  aaa\nbbb\nccc\n










 비교식1 || 비교식2 || 비교식3  
 비교식1 && 비교식2 && 비교식3

[ 메서드 ]
- 수행코드는 반드시 메서드 안에 작성해야 한다.
- main()도 메서드로서 JVM에 의해 자바프로그램이 수행을 시작할 때
  최초로 호출된다.(자바프로그램 수행의 시작점)
- 자주 필요로 하는 기능을 추가 메서드로 생성하여 활용하는 것이 
  일반적이다.
- 메서드 생성 방법
- 메서드 사용 방법 : 호출

[ 메서드 생성 방법 ]
- 메서드명 : 관례적으로 동사로시작, 소문자로 시작
- 매개변수 선언 : 선택적이다. 갯수 제한 없다.
               호출시 전달받을 데이터의 유무에 따라
- 리턴값의 타입 : 호출한 곳으로 결과값을 반환할지의 여부에 따라(필수)
               리턴값이 없는 경우에는 void 라는 리턴타입 지정                              
               하나의 값만 리턴 가능
               여러 값을 리턴하려는 경우에는 배열 또는 객체를 활용

   리턴타입 메서드명([매개변수 선언...]) {
	....
 	....
	[ return 리턴값; ]
   }

   변수명 = 메서드명();
   메서드명();
   변수명 = 메서드명(아규먼트...);
   메서드명(아규먼트...);




 System.out.println();	// 개행처리만
 System.out.println(100);
 System.out.println(true);
 System.out.println("duke");
 -----------------------------> 10개로 오버로딩

  [ 가변인자 타입 ]
  매개변수의 타입에 ... 을 붙이면 가변인자 타입이 되며
  가변인자 타입의 매개변수는 내부적으로 배열이 된다.
  호출할 땐 해당 타입의 아규먼트를 0개이상 전달 가능하다.
  제한사항 : 반드시 마지막 매개변수에만 가변인자 타입이 가능하다.

     void m1(int... nums)
     void m1(char ch, int... nums)
     void m1(int... nums, char ch) (x)
   new int[0], new String[0]


   aaa bbb ccc ddd 1234 가나다

   java day5.MethodTest7
   java day5.MethodTest7 abc 가나 100













 


























